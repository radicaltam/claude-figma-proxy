// /api/claude.js - Working Vercel serverless function

export default async function handler(req, res) {
  console.log('Claude API Handler - Request received:', req.method);
  
  // Set comprehensive CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Accept, Origin');
  res.setHeader('Access-Control-Max-Age', '86400');
  res.setHeader('Content-Type', 'application/json');
  
  // Handle preflight OPTIONS request
  if (req.method === 'OPTIONS') {
    console.log('Handling OPTIONS preflight request');
    return res.status(200).end();
  }
  
  // Only allow POST requests
  if (req.method !== 'POST') {
    console.log('Method not allowed:', req.method);
    return res.status(405).json({ 
      success: false, 
      error: 'Method not allowed. Use POST.' 
    });
  }
  
  try {
    // Debug environment variables
    console.log('Environment check:', {
      hasClaudeKey: !!process.env.CLAUDE_API_KEY,
      nodeEnv: process.env.NODE_ENV,
      keyLength: process.env.CLAUDE_API_KEY ? process.env.CLAUDE_API_KEY.length : 0
    });
    
    // Get Claude API key from environment
    const claudeApiKey = process.env.CLAUDE_API_KEY;
    
    if (!claudeApiKey) {
      console.error('CLAUDE_API_KEY environment variable not found');
      return res.status(500).json({
        success: false,
        error: 'API key not configured',
        debug: 'CLAUDE_API_KEY environment variable is missing'
      });
    }
    
    if (!claudeApiKey.startsWith('sk-ant-')) {
      console.error('Invalid API key format');
      return res.status(500).json({
        success: false,
        error: 'Invalid API key format',
        debug: 'API key should start with sk-ant-'
      });
    }
    
    // Parse request body
    const { prompt, context, format } = req.body;
    
    if (!prompt) {
      console.log('Missing prompt in request');
      return res.status(400).json({
        success: false,
        error: 'Missing required field: prompt'
      });
    }
    
    console.log('Processing Claude request:', {
      context: context || 'none',
      format: format || 'none',
      promptLength: prompt.length
    });
    
    // Prepare Claude API request payload
    const claudePayload = {
      model: 'claude-3-haiku-20240307', // Fast and cost-effective model
      max_tokens: 1000,
      temperature: 0.7,
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ]
    };
    
    console.log('Calling Claude API...');
    
    // Call Claude API
    const claudeResponse = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': claudeApiKey,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify(claudePayload)
    });
    
    console.log('Claude API response status:', claudeResponse.status);
    
    if (!claudeResponse.ok) {
      const errorText = await claudeResponse.text();
      console.error('Claude API error:', {
        status: claudeResponse.status,
        statusText: claudeResponse.statusText,
        error: errorText
      });
      
      return res.status(claudeResponse.status).json({
        success: false,
        error: `Claude API error: ${claudeResponse.status}`,
        details: errorText,
        debug: 'Check your Claude API key and quota'
      });
    }
    
    const claudeData = await claudeResponse.json();
    console.log('Claude API success - response received');
    
    // Extract content from Claude response
    let content = '';
    if (claudeData.content && claudeData.content.length > 0) {
      content = claudeData.content[0].text || '';
    }
    
    if (!content) {
      console.log('No content in Claude response');
      return res.status(200).json({
        success: false,
        error: 'No content generated by Claude',
        debug: 'Claude returned empty response'
      });
    }
    
    // Process content based on format
    let processedContent = content;
    
    if (format === 'structured') {
      try {
        // Try to parse as JSON
        processedContent = JSON.parse(content);
        console.log('Successfully parsed structured JSON response');
      } catch (parseError) {
        console.log('Could not parse as JSON, returning raw text');
        // Keep as raw text - will be processed on client side
        processedContent = content;
      }
    }
    
    // Return successful response
    const response = {
      success: true,
      content: processedContent,
      usage: claudeData.usage || null,
      model: claudeData.model || null,
      debug: 'Response generated successfully'
    };
    
    console.log('Returning successful response');
    return res.status(200).json(response);
    
  } catch (error) {
    console.error('Unexpected error in Claude handler:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    return res.status(500).json({
      success: false,
      error: 'Internal server error',
      message: error.message,
      debug: 'Check server logs for details'
    });
  }
}
